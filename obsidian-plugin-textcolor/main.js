/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => TextColorPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var ColorPicker = class {
  constructor() {
    this.hue = 0;
    this.saturation = 100;
    this.lightness = 50;
    this.opacity = 1;
  }
  setHue(hue) {
    this.hue = hue;
  }
  setSaturation(saturation) {
    this.saturation = saturation;
  }
  setLightness(lightness) {
    this.lightness = lightness;
  }
  setOpacity(opacity) {
    this.opacity = opacity;
  }
  convertToRGB() {
    const h = this.hue / 360;
    const s = this.saturation / 100;
    const l = this.lightness / 100;
    let r, g, b;
    if (s === 0) {
      r = g = b = l;
    } else {
      const hue2rgb = (p2, q2, t) => {
        if (t < 0)
          t += 1;
        if (t > 1)
          t -= 1;
        if (t < 1 / 6)
          return p2 + (q2 - p2) * 6 * t;
        if (t < 1 / 2)
          return q2;
        if (t < 2 / 3)
          return p2 + (q2 - p2) * (2 / 3 - t) * 6;
        return p2;
      };
      const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
      const p = 2 * l - q;
      r = hue2rgb(p, q, h + 1 / 3);
      g = hue2rgb(p, q, h);
      b = hue2rgb(p, q, h - 1 / 3);
    }
    return { r: Math.round(r * 255), g: Math.round(g * 255), b: Math.round(b * 255), a: this.opacity };
  }
  getHex() {
    const rgbColor = this.convertToRGB();
    return this.rgbToHex(rgbColor.r, rgbColor.g, rgbColor.b, rgbColor.a);
  }
  setFromHex(hex) {
    const r = parseInt(hex.slice(1, 3), 16);
    const g = parseInt(hex.slice(3, 5), 16);
    const b = parseInt(hex.slice(5, 7), 16);
    let a;
    if (hex.length === 9) {
      a = parseInt(hex.slice(7, 9), 16) / 255;
    } else {
      a = 1;
    }
    this.hue = this.rgbToHue(r, g, b);
    this.saturation = this.rgbToSaturation(r, g, b);
    this.lightness = this.rgbToLightness(r, g, b);
    this.opacity = a;
  }
  rgbToHex(r, g, b, a) {
    const hex = (n) => n.toString(16).padStart(2, "0");
    const aHex = Math.round(a * 255);
    return `#${hex(r)}${hex(g)}${hex(b)}${hex(aHex)}`;
  }
  rgbToHue(r, g, b) {
    r /= 255;
    g /= 255;
    b /= 255;
    const max = Math.max(r, g, b);
    const min = Math.min(r, g, b);
    let h = 0;
    if (max !== min) {
      const d = max - min;
      switch (max) {
        case r:
          h = (g - b) / d + (g < b ? 6 : 0);
          break;
        case g:
          h = (b - r) / d + 2;
          break;
        case b:
          h = (r - g) / d + 4;
          break;
      }
      h /= 6;
    }
    return Math.round(h * 360);
  }
  rgbToSaturation(r, g, b) {
    r /= 255;
    g /= 255;
    b /= 255;
    const max = Math.max(r, g, b);
    const min = Math.min(r, g, b);
    let s, l;
    l = (max + min) / 2;
    if (max === min) {
      s = 0;
    } else {
      const d = max - min;
      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
    }
    return Math.round(s * 100);
  }
  rgbToLightness(r, g, b) {
    r /= 255;
    g /= 255;
    b /= 255;
    const max = Math.max(r, g, b);
    const min = Math.min(r, g, b);
    let l;
    l = (max + min) / 2;
    return Math.round(l * 100);
  }
};
var ColorPickerModal = class extends import_obsidian.Modal {
  constructor(app, colorPicker) {
    super(app);
    this.colorPicker = colorPicker;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h3", { text: "Choose a color" });
    new import_obsidian.Setting(contentEl).setName("Hue").addSlider((slider) => slider.setLimits(0, 360, 1).setValue(this.colorPicker.hue).onChange((value) => {
      this.colorPicker.setHue(value);
      this.updateHexInput();
      this.updateColorPreview();
    }));
    new import_obsidian.Setting(contentEl).setName("Saturation").addSlider((slider) => slider.setLimits(0, 100, 1).setValue(this.colorPicker.saturation).onChange((value) => {
      this.colorPicker.setSaturation(value);
      this.updateHexInput();
      this.updateColorPreview();
    }));
    new import_obsidian.Setting(contentEl).setName("Lightness").addSlider((slider) => slider.setLimits(0, 100, 1).setValue(this.colorPicker.lightness).onChange((value) => {
      this.colorPicker.setLightness(value);
      this.updateHexInput();
      this.updateColorPreview();
    }));
    new import_obsidian.Setting(contentEl).setName("Opacity").addSlider((slider) => slider.setLimits(0, 1, 0.01).setValue(this.colorPicker.opacity).onChange((value) => {
      this.colorPicker.setOpacity(value);
      this.updateHexInput();
      this.updateColorPreview();
    }));
    new import_obsidian.Setting(contentEl).setName("HEX").addText((text) => {
      text.inputEl.type = "text";
      text.inputEl.pattern = "[#][0-9a-fA-F]{6,8}";
      text.setValue(this.colorPicker.getHex());
      text.onChange((value) => {
        if (/^#[0-9a-fA-F]{6,8}$/.test(value)) {
          this.colorPicker.setFromHex(value);
          this.updateSliders();
          this.updateColorPreview();
        }
      });
      this.hexInput = text.inputEl;
    });
    this.colorPreviewBox = contentEl.createEl("div", { cls: "color-preview-box" });
    this.colorPreviewBox.style.height = "50px";
    this.colorPreviewBox.style.width = "100%";
    this.colorPreviewBox.style.border = "1px solid #ddd";
    this.updateColorPreview();
    new import_obsidian.Setting(contentEl).addButton((button) => {
      button.setButtonText("Save").onClick(() => {
        const rgbColor = this.colorPicker.convertToRGB();
        const colorString = `rgba(${rgbColor.r}, ${rgbColor.g}, ${rgbColor.b}, ${rgbColor.a})`;
        document.documentElement.style.setProperty("--selected-color", colorString);
        new import_obsidian.Notice(`Color ${colorString} saved!`);
        this.close();
      });
    });
  }
  updateHexInput() {
    const rgbColor = this.colorPicker.convertToRGB();
    this.hexInput.value = this.colorPicker.rgbToHex(rgbColor.r, rgbColor.g, rgbColor.b, rgbColor.a);
  }
  updateSliders() {
  }
  updateColorPreview() {
    const hexColor = this.colorPicker.getHex();
    this.colorPreviewBox.style.backgroundColor = hexColor;
  }
};
var TextColorPlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.addCommand({
      id: "textcolor",
      name: "Change Text Color",
      callback: () => {
        const colorPicker = new ColorPicker();
        new ColorPickerModal(this.app, colorPicker).open();
      }
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
